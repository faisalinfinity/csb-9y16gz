{"version":3,"sources":["utils/chat.js","Component/Contacts.jsx","App.js","index.js"],"names":["users","id","name","createConnection","user","console","log","listen","callback","setInterval","message","Date","toTimeString","unsubscribe","clearInterval","Contacts","active","onChange","map","style","background","onClick","ChatApp","useState","messages","setMessages","subscribedTo","setSubscribedTo","useEffect","connection","prevmessages","item","rootElement","document","getElementById","createRoot","render","App"],"mappings":"wJAAaA,EAAQ,CACnB,CACEC,GAAI,EACJC,KAAM,QAER,CACED,GAAI,EACJC,KAAM,WAsBKC,MAlBf,SAA0BC,GAExB,IAAIH,EAaJ,OAdAI,QAAQC,IAAI,uBAAwBF,GAc7B,CAAEG,OAZT,SAAgBC,GACdP,EAAKQ,aAAY,WACf,IAAIC,EAAO,2BACTN,EAAKF,KAAI,gBACJ,IAAIS,MAAOC,gBAClBJ,EAASE,EACX,GAAG,IACL,EAKiBG,YAJjB,WACER,QAAQC,IAAI,wBAAD,OAAyBF,EAAKF,OACzCY,cAAcb,EAChB,EAEF,E,OCXec,MAhBf,SAAkB,GAA8B,IAA5Bf,EAAK,EAALA,MAAOgB,EAAM,EAANA,OAAQC,EAAQ,EAARA,SACjC,OACE,8BACGjB,EAAMkB,KAAI,SAACd,GAAI,OACd,qBACEe,MAAO,CAAEC,WAAYJ,IAAWZ,EAAO,SAAW,MAElDiB,QAAS,kBAAMJ,EAASb,EAAK,EAAC,SAE7BA,EAAKF,MAHDE,EAAKH,GAIN,KAId,ECmCeqB,MA5Cf,WACE,MAAgCC,mBAAS,IAAG,mBAArCC,EAAQ,KAAEC,EAAW,KAC5B,EAAwCF,mBAASvB,EAAM,IAAG,mBAAnD0B,EAAY,KAAEC,EAAe,KAuBpC,OArBAC,qBAAU,WACR,IAAMC,EAAa1B,EAAiBuB,GACpCG,EAAWtB,QAAO,SAACiB,GACjBC,GAAY,SAACK,GAAY,4BAASA,GAAY,CAAEN,GAAW,GAC7D,IAOA,OALgB,WACdK,EAAWhB,cACXY,EAAY,GACd,CAGF,GAAG,CAACC,IAUF,gCACE,0CACA,cAAC,EACC,CACA1B,MAAOA,EAEPgB,OAAQU,EAERT,SAAU,SAACb,GAAI,OAAKuB,EAAgBvB,EAAK,IAE3C,uBACCoB,EAASN,KAAI,SAACa,GAAI,OACjB,6BAAgBA,GAAPA,EAAiB,MAIlC,EC1CMC,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OAAO,cAACC,EAAG,I","file":"static/js/main.dd2bc06a.chunk.js","sourcesContent":["export const users = [\n  {\n    id: 1,\n    name: \"Aman\"\n  },\n  {\n    id: 2,\n    name: \"Albert\"\n  }\n];\n\nfunction createConnection(user) {\n  console.log(`started lisening to `, user);\n  let id;\n  function listen(callback) {\n    id = setInterval(() => {\n      let message = `new Message from ${\n        user.name\n      } at ${new Date().toTimeString()}`;\n      callback(message);\n    }, 1000);\n  }\n  function unsubscribe() {\n    console.log(`stopped listening to ${user.name}`);\n    clearInterval(id);\n  }\n  return { listen, unsubscribe };\n}\n\nexport default createConnection;\n","function Contacts({ users, active, onChange }) {\n  return (\n    <div>\n      {users.map((user) => (\n        <div\n          style={{ background: active === user ? \"tomato\" : null }}\n          key={user.id}\n          onClick={() => onChange(user)}\n        >\n          {user.name}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Contacts;\n","import { useEffect, useState } from \"react\";\nimport createConnection from \"./utils/chat\";\nimport { users } from \"./utils/chat\";\nimport Contacts from \"./Component/Contacts\";\n\nfunction ChatApp() {\n  const [messages, setMessages] = useState([]);\n  const [subscribedTo, setSubscribedTo] = useState(users[0]);\n\n  useEffect(() => {\n    const connection = createConnection(subscribedTo);\n    connection.listen((messages) => {\n      setMessages((prevmessages) => [...prevmessages, messages]);\n    });\n\n    const cleanup = () => {\n      connection.unsubscribe();\n      setMessages([]);\n    };\n\n    return cleanup;\n  }, [subscribedTo]);\n  // - const {listen, unsubscribe} = creteConnection( currentUser )\n  // - const connection = creteConnection( currentUser )\n  // - listen( callback )\n  // - the callback will be given any new message\n  // - so you can write listen( message => {...your code} )\n  // - you need to ensure you are unsubscribing from user1 to user2 as well\n  // - display all the messages on the UI\n  // - when changing user, messages should be reset\n  return (\n    <div>\n      <h1>Contacts</h1>\n      <Contacts\n        // all users\n        users={users}\n        // active user\n        active={subscribedTo}\n        // onChange\n        onChange={(user) => setSubscribedTo(user)}\n      />\n      <hr />\n      {messages.map((item) => (\n        <li key={item}>{item}</li>\n      ))}\n    </div>\n  );\n}\n\nexport default ChatApp;\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(<App />);\n"],"sourceRoot":""}